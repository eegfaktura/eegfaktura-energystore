// Code generated by proto-gen-go-grpc. DO NOT EDIT.
// versions:
// - proto-gen-go-grpc v1.3.0
// - proto             v3.12.4
// source: proto/excel.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExcelAdminService_SendExcel_FullMethodName = "/at.energydash.ExcelAdminService/SendExcel"
)

// ExcelAdminServiceClient is the client API for ExcelAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelAdminServiceClient interface {
	// Sends a greeting
	SendExcel(ctx context.Context, in *SendExcelRequest, opts ...grpc.CallOption) (*SendExcelReply, error)
}

type excelAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelAdminServiceClient(cc grpc.ClientConnInterface) ExcelAdminServiceClient {
	return &excelAdminServiceClient{cc}
}

func (c *excelAdminServiceClient) SendExcel(ctx context.Context, in *SendExcelRequest, opts ...grpc.CallOption) (*SendExcelReply, error) {
	out := new(SendExcelReply)
	err := c.cc.Invoke(ctx, ExcelAdminService_SendExcel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelAdminServiceServer is the server API for ExcelAdminService service.
// All implementations must embed UnimplementedExcelAdminServiceServer
// for forward compatibility
type ExcelAdminServiceServer interface {
	// Sends a greeting
	SendExcel(context.Context, *SendExcelRequest) (*SendExcelReply, error)
	mustEmbedUnimplementedExcelAdminServiceServer()
}

// UnimplementedExcelAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExcelAdminServiceServer struct {
}

func (UnimplementedExcelAdminServiceServer) SendExcel(context.Context, *SendExcelRequest) (*SendExcelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendExcel not implemented")
}
func (UnimplementedExcelAdminServiceServer) mustEmbedUnimplementedExcelAdminServiceServer() {}

// UnsafeExcelAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelAdminServiceServer will
// result in compilation errors.
type UnsafeExcelAdminServiceServer interface {
	mustEmbedUnimplementedExcelAdminServiceServer()
}

func RegisterExcelAdminServiceServer(s grpc.ServiceRegistrar, srv ExcelAdminServiceServer) {
	s.RegisterService(&ExcelAdminService_ServiceDesc, srv)
}

func _ExcelAdminService_SendExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendExcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelAdminServiceServer).SendExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelAdminService_SendExcel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelAdminServiceServer).SendExcel(ctx, req.(*SendExcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExcelAdminService_ServiceDesc is the grpc.ServiceDesc for ExcelAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "at.energydash.ExcelAdminService",
	HandlerType: (*ExcelAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendExcel",
			Handler:    _ExcelAdminService_SendExcel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/excel.proto",
}
